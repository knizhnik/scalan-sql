#ifndef __STUB_H__
    #define __STUB_H__

    namespace McoSql
    {

        class ArrayStub: public Array
        {
            public:
                Vector < Value > * items;
                Type elemType;

                virtual void setAt(int index, Value* value);
                virtual Value* updateAt(int index);
                virtual void setSize(int newSize);
                virtual void getBody(void* dst, int offs, int len);
                virtual void setBody(void* src, int offs, int len);
                virtual Value* getAt(int index);
                virtual int size();
                virtual int getElemSize() const;
                virtual Type getElemType() const;

                ArrayStub(Vector<Value>* vec, Type type=tpRaw) : items(vec), elemType(type) {}
                static ArrayStub* create(Vector<Value>* vec, Type type=tpRaw);

                virtual Value* clone(AbstractAllocator* alloc);
        };

        class StructStub: public Record
        {
            public:
                Vector < Value > * items;
                Value* outer;

                virtual void deleteRecord();
                virtual void updateRecord();
                           
                virtual int nComponents();
                virtual Value* get(int index);
                virtual void set(int index, Value* value);
                virtual Value* update(int index);
                virtual Struct* source();
                virtual Value* scope();
        };

        class ReferenceStub: public Reference
        {
            public:
                int64_t oid;

                ReferenceStub(int64_t oid)
                {
                        this->oid = oid;
                }
                virtual Record* dereference();
                virtual int compare(Value* v);
                virtual size_t toString(char* buf, size_t bufSize);
                virtual int64_t intValue();
                virtual String* stringValue();

                virtual Value* clone(AbstractAllocator* alloc);
        };

        class BlobStub: public Blob
        {
            public:
                String* content;
                int     pos;

                virtual int available();
                virtual int get(void* buffer, int size);
                virtual void append(void const* buffer, int size);
                virtual void reset();
                virtual void truncate();
        };

        class CursorStub;
        class FieldStub;

        class DataSourceStub: public DataSource
        {
            public:
                typedef void(*callback_t)(DataSourceStub* ds, void* arg);

                struct ContentPart: public DynamicObject
                {
                        ContentPart* next;
                        char* data;
                };

                FieldStub* columns;
                int nColumns;
                int size;
                char* buf;
                void* arg;
                size_t bufSize;
                callback_t reader;
                callback_t destructor;
                ContentPart* content;
                size_t mark;
                size_t segmentId;

                virtual void release();
                virtual int nFields();
                virtual size_t nRecords(Transaction* trans);
                virtual Iterator < Field > * fields();
                virtual Cursor* records(Transaction* trans);
                virtual Cursor* records();
                virtual bool isNumberOfRecordsKnown();
                virtual bool isRIDAvailable();
                virtual int compareRID(Record* r1, Record* r2);
                virtual Reference* getRID(Record* rec);
                virtual void setMark(size_t mark);
        };

        class FieldStub: public Field
        {
            public:
                Field* fieldScope;
                Type fieldType;
                String* fieldName;
                int fieldNo;
                int fixedArraySize;
                int numericPrecision;
                bool synthetic;
                bool nullable;
                FieldStub* members;
                FieldStub* next;

                virtual String* name();
                virtual Type type();
                virtual Table* table();
                virtual Field* scope();
                virtual Value* get(Struct* rec);
                virtual Value* update(Struct* rec);
                virtual void set(Struct* rec, Value* val);
                virtual String* referencedTableName();
                virtual Iterator < Field > * components();
                virtual Type elementType();
                virtual int elementSize();
                virtual Field* element();
                virtual int fixedSize();
                virtual int precision();
                virtual int width();
                virtual SortOrder order();
                virtual bool isAutoGenerated();
                virtual bool isNullable();

                char* deserialize(char* buf);
        };

        class CursorStub: public Cursor
        {
                DataSourceStub* ds;
                char* buf;
                Value* curr;

            public:
                virtual bool hasNext();
                virtual Record* next();

                CursorStub(DataSourceStub* ds);
        };
    }

#endif
