package scalan.sql
import scalan._

trait Queries extends ScalanDsl with SqlDsl {

implicit class StringFormatter(str: Rep[String]) {
  def toDate: Rep[Int] = (str.substring(0, 4) + str.substring(5, 7) + str.substring(8, 10)).toInt
  def toChar: Rep[Char] = str(0)
}

type Lineitem = (Int, (Int, (Int, (Int, (Double, (Double, (Double, (Double, (Char, (Char, (Int, (Int, (Int, (String, (String, String)))))))))))))))

def createLineitem(tableName: Rep[String]) = PairTable.create(Table.create[Int](tableName + ".l_orderkey"), PairTable.create(Table.create[Int](tableName + ".l_partkey"), PairTable.create(Table.create[Int](tableName + ".l_suppkey"), PairTable.create(Table.create[Int](tableName + ".l_linenumber"), PairTable.create(Table.create[Double](tableName + ".l_quantity"), PairTable.create(Table.create[Double](tableName + ".l_extendedprice"), PairTable.create(Table.create[Double](tableName + ".l_discount"), PairTable.create(Table.create[Double](tableName + ".l_tax"), PairTable.create(Table.create[Char](tableName + ".l_returnflag"), PairTable.create(Table.create[Char](tableName + ".l_linestatus"), PairTable.create(Table.create[Int](tableName + ".l_shipdate"), PairTable.create(Table.create[Int](tableName + ".l_commitdate"), PairTable.create(Table.create[Int](tableName + ".l_receiptdate"), PairTable.create(Table.create[String](tableName + ".l_shipinstruct"), PairTable.create(Table.create[String](tableName + ".l_shipmode"), Table.create[String](tableName + ".l_comment"))))))))))))))))

def parseLineitem(c: Arr[String]): Rep[Lineitem] = Pair(c(0).toInt, Pair(c(1).toInt, Pair(c(2).toInt, Pair(c(3).toInt, Pair(c(4).toDouble, Pair(c(5).toDouble, Pair(c(6).toDouble, Pair(c(7).toDouble, Pair(c(8).toChar, Pair(c(9).toChar, Pair(c(10).toDate, Pair(c(11).toDate, Pair(c(12).toDate, Pair(c(13), Pair(c(14), c(15))))))))))))))))


type Orders = (Int, (Int, (Char, (Double, (Int, (String, (String, (Int, String))))))))

def createOrders(tableName: Rep[String]) = PairTable.create(Table.create[Int](tableName + ".o_orderkey"), PairTable.create(Table.create[Int](tableName + ".o_custkey"), PairTable.create(Table.create[Char](tableName + ".o_orderstatus"), PairTable.create(Table.create[Double](tableName + ".o_totalprice"), PairTable.create(Table.create[Int](tableName + ".o_orderdate"), PairTable.create(Table.create[String](tableName + ".o_orderpriority"), PairTable.create(Table.create[String](tableName + ".o_clerk"), PairTable.create(Table.create[Int](tableName + ".o_shippriority"), Table.create[String](tableName + ".o_comment")))))))))

def parseOrders(c: Arr[String]): Rep[Orders] = Pair(c(0).toInt, Pair(c(1).toInt, Pair(c(2).toChar, Pair(c(3).toDouble, Pair(c(4).toDate, Pair(c(5), Pair(c(6), Pair(c(7).toInt, c(8)))))))))


type Customer = (Int, (String, (String, (Int, (String, (Double, (String, String)))))))

def createCustomer(tableName: Rep[String]) = PairTable.create(Table.create[Int](tableName + ".c_custkey"), PairTable.create(Table.create[String](tableName + ".c_name"), PairTable.create(Table.create[String](tableName + ".c_address"), PairTable.create(Table.create[Int](tableName + ".c_nationkey"), PairTable.create(Table.create[String](tableName + ".c_phone"), PairTable.create(Table.create[Double](tableName + ".c_acctbal"), PairTable.create(Table.create[String](tableName + ".c_mktsegment"), Table.create[String](tableName + ".c_comment"))))))))

def parseCustomer(c: Arr[String]): Rep[Customer] = Pair(c(0).toInt, Pair(c(1), Pair(c(2), Pair(c(3).toInt, Pair(c(4), Pair(c(5).toDouble, Pair(c(6), c(7))))))))


type Supplier = (Int, (String, (String, (Int, (String, (Double, String))))))

def createSupplier(tableName: Rep[String]) = PairTable.create(Table.create[Int](tableName + ".s_suppkey"), PairTable.create(Table.create[String](tableName + ".s_name"), PairTable.create(Table.create[String](tableName + ".s_address"), PairTable.create(Table.create[Int](tableName + ".s_nationkey"), PairTable.create(Table.create[String](tableName + ".s_phone"), PairTable.create(Table.create[Double](tableName + ".s_acctbal"), Table.create[String](tableName + ".s_comment")))))))

def parseSupplier(c: Arr[String]): Rep[Supplier] = Pair(c(0).toInt, Pair(c(1), Pair(c(2), Pair(c(3).toInt, Pair(c(4), Pair(c(5).toDouble, c(6)))))))


type Partsupp = (Int, (Int, (Int, (Double, String))))

def createPartsupp(tableName: Rep[String]) = PairTable.create(Table.create[Int](tableName + ".ps_partkey"), PairTable.create(Table.create[Int](tableName + ".ps_suppkey"), PairTable.create(Table.create[Int](tableName + ".ps_availqty"), PairTable.create(Table.create[Double](tableName + ".ps_supplycost"), Table.create[String](tableName + ".ps_comment")))))

def parsePartsupp(c: Arr[String]): Rep[Partsupp] = Pair(c(0).toInt, Pair(c(1).toInt, Pair(c(2).toInt, Pair(c(3).toDouble, c(4)))))


type Region = (Int, (String, String))

def createRegion(tableName: Rep[String]) = PairTable.create(Table.create[Int](tableName + ".r_regionkey"), PairTable.create(Table.create[String](tableName + ".r_name"), Table.create[String](tableName + ".r_comment")))

def parseRegion(c: Arr[String]): Rep[Region] = Pair(c(0).toInt, Pair(c(1), c(2)))


type Nation = (Int, (String, (Int, String)))

def createNation(tableName: Rep[String]) = PairTable.create(Table.create[Int](tableName + ".n_nationkey"), PairTable.create(Table.create[String](tableName + ".n_name"), PairTable.create(Table.create[Int](tableName + ".n_regionkey"), Table.create[String](tableName + ".n_comment"))))

def parseNation(c: Arr[String]): Rep[Nation] = Pair(c(0).toInt, Pair(c(1), Pair(c(2).toInt, c(3))))


type Part = (Int, (String, (String, (String, (String, (Int, (String, (Double, String))))))))

def createPart(tableName: Rep[String]) = PairTable.create(Table.create[Int](tableName + ".p_partkey"), PairTable.create(Table.create[String](tableName + ".p_name"), PairTable.create(Table.create[String](tableName + ".p_mfgr"), PairTable.create(Table.create[String](tableName + ".p_brand"), PairTable.create(Table.create[String](tableName + ".p_type"), PairTable.create(Table.create[Int](tableName + ".p_size"), PairTable.create(Table.create[String](tableName + ".p_container"), PairTable.create(Table.create[Double](tableName + ".p_retailprice"), Table.create[String](tableName + ".p_comment")))))))))

def parsePart(c: Arr[String]): Rep[Part] = Pair(c(0).toInt, Pair(c(1), Pair(c(2), Pair(c(3), Pair(c(4), Pair(c(5).toInt, Pair(c(6), Pair(c(7).toDouble, c(8)))))))))


def lineitem_pk(r: Rep[Lineitem]) = Pair(r.head, r.tail.tail.tail.head)

def lineitem_order_fk(r: Rep[Lineitem]) = r.head

def lineitem_supp_fk(r: Rep[Lineitem]) = r.tail.tail.head

def lineitem_part_fk(r: Rep[Lineitem]) = r.tail.head

def lineitem_ps_fk(r: Rep[Lineitem]) = Pair(r.tail.head, r.tail.tail.head)

def part_pk(r: Rep[Part]) = r.head

def supplier_pk(r: Rep[Supplier]) = r.head

def partsupp_pk(r: Rep[Partsupp]) = Pair(r.head, r.tail.head)

def partsupp_supp_fk(r: Rep[Partsupp]) = r.tail.head

def partsupp_part_fk(r: Rep[Partsupp]) = r.head

def customer_pk(r: Rep[Customer]) = r.head

def customer_nation_fk(r: Rep[Customer]) = r.tail.tail.tail.head

def orders_pk(r: Rep[Orders]) = r.head

def orders_cust_fk(r: Rep[Orders]) = r.tail.head

def nation_pk(r: Rep[Nation]) = r.head

def nation_region_fk(r: Rep[Nation]) = r.tail.tail.head

def region_pk(r: Rep[Region]) = r.head

def Q1(lineitem: Rep[Table[Lineitem]]) = ReadOnlyTable(lineitem.where(r1 => (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= toRep(19981201))).mapReduce(r => Pair(Pair(r.tail.tail.tail.tail.tail.tail.tail.tail.head, r.tail.tail.tail.tail.tail.tail.tail.tail.tail.head), Pair(r.tail.tail.tail.tail.head, Pair(r.tail.tail.tail.tail.tail.head, Pair((r.tail.tail.tail.tail.tail.head * (toRep(1.0) - r.tail.tail.tail.tail.tail.tail.head)), Pair(((r.tail.tail.tail.tail.tail.head * (toRep(1.0) - r.tail.tail.tail.tail.tail.tail.head)) * (toRep(1.0) + r.tail.tail.tail.tail.tail.tail.tail.head)), Pair(r.tail.tail.tail.tail.head, Pair(r.tail.tail.tail.tail.tail.head, Pair(r.tail.tail.tail.tail.tail.tail.head, 1)))))))),
 (s1: Rep[(Double, (Double, (Double, (Double, (Double, (Double, (Double, Int)))))))], s2: Rep[(Double, (Double, (Double, (Double, (Double, (Double, (Double, Int)))))))]) => (s1._1 + s2._1,s1._2 + s2._2,s1._3 + s2._3,s1._4 + s2._4,s1._5 + s2._5,s1._6 + s2._6,s1._7 + s2._7,s1._8 + s2._8)).toArray.map(r => Pair(r.head.head, Pair(r.head.tail, Pair(r.tail.head, Pair(r.tail.tail.head, Pair(r.tail.tail.tail.head, Pair(r.tail.tail.tail.tail.head, Pair((r.tail.tail.tail.tail.tail.head.toDouble / r.tail.tail.tail.tail.tail.tail.tail.tail.toDouble), Pair((r.tail.tail.tail.tail.tail.tail.head.toDouble / r.tail.tail.tail.tail.tail.tail.tail.tail.toDouble), Pair((r.tail.tail.tail.tail.tail.tail.tail.head.toDouble / r.tail.tail.tail.tail.tail.tail.tail.tail.toDouble), r.tail.tail.tail.tail.tail.tail.tail.tail))))))))))).orderBy(r => Pair(r.head, r.tail.head))

def Q2(region: Rep[Table[Region]], part: Rep[Table[Part]], supplier: Rep[Table[Supplier]], nation: Rep[Table[Nation]], partsupp: Rep[Table[Partsupp]]) = part.where(r => ((r.tail.tail.tail.tail.tail.head === toRep(43)) && r.tail.tail.tail.tail.head.startsWith("TIN"))).join(partsupp)(r => r.head, r => r.head).join(supplier)(r => r.tail.tail.head, r => r.head).join(nation)(r => r.tail.tail.tail.tail.head, r => r.head).join(region)(r => r.tail.tail.tail.head, r => r.head).where(r => ((r.tail.tail.head === toRep("AFRICA")) && (r.head.head.head.tail.tail.tail.tail.head === ({ val result = partsupp.where(r2 => (r.head.head.head.head.head === r2.head)).join(supplier)(r2 => r2.head, r2 => r2.head).join(nation)(r2 => r2.tail.tail.tail.tail.head, r2 => r2.head).join(region)(r2 => r2.tail.tail.tail.head, r2 => r2.head).where(r2 => (r2.tail.tail.head === toRep("AFRICA"))) ; (result.min(r1 => r1.head.head.head.tail.tail.tail.head)) })))).select(r => Pair(r.head.head.tail.tail.tail.tail.tail.tail.head, Pair(r.head.head.tail.tail.head, Pair(r.head.tail.tail.head, Pair(r.head.head.head.head.head, Pair(r.head.head.head.head.tail.tail.head, Pair(r.head.head.tail.tail.tail.head, Pair(r.head.head.tail.tail.tail.tail.tail.head, r.head.head.tail.tail.tail.tail.tail.tail.tail)))))))).orderBy(r => Pair(r.head, Pair(r.tail.tail.head, Pair(r.tail.head, r.tail.tail.tail.head))))

def Q3(customer: Rep[Table[Customer]], orders: Rep[Table[Orders]], lineitem: Rep[Table[Lineitem]]) = ReadOnlyTable(customer.where(r1 => (r1.tail.tail.tail.tail.tail.tail.head === toRep("HOUSEHOLD"))).join(orders)(r1 => r1.head, r1 => r1.tail.head).where(r1 => (r1.tail.tail.tail.tail.tail.head < toRep(19950304))).join(lineitem)(r1 => r1.tail.head, r1 => r1.head).where(r1 => (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head > toRep(19950304))).mapReduce(r => Pair(Pair(r.tail.head, Pair(r.head.tail.tail.tail.tail.tail.head, r.head.tail.tail.tail.tail.tail.tail.tail.tail.head)), (r.tail.tail.tail.tail.tail.tail.head * (toRep(1.0) - r.tail.tail.tail.tail.tail.tail.tail.head))),
 (s1: Rep[Double], s2: Rep[Double]) => (s1 + s2)).toArray.map(r => Pair(r.head.head, Pair(r.tail, Pair(r.head.tail.head, r.head.tail.tail))))).orderBy(r => Pair(-r.tail.head, r.tail.tail.head))

def Q4(orders: Rep[Table[Orders]], lineitem: Rep[Table[Lineitem]]) = ReadOnlyTable(orders.where(r1 => ((r1.tail.tail.tail.tail.head >= toRep(19930801)) && (r1.tail.tail.tail.tail.head < toRep(19931101)))).join(lineitem)(r1 => r1.head, r1 => r1.head).where(r1 => (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head < r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)).mapReduce(r => Pair(r.head.tail.tail.tail.tail.tail.head, 1),
 (s1: Rep[Int], s2: Rep[Int]) => (s1 + s2)).toArray.map(r => Pair(r.head, r.tail))).orderBy(r => r.head)

def Q5(region: Rep[Table[Region]], customer: Rep[Table[Customer]], lineitem: Rep[Table[Lineitem]], supplier: Rep[Table[Supplier]], nation: Rep[Table[Nation]], orders: Rep[Table[Orders]]) = ReadOnlyTable(customer.join(orders)(r1 => r1.head, r1 => r1.tail.head).where(r1 => (r1.tail.tail.tail.tail.tail.head < toRep(19970101))).join(lineitem)(r1 => r1.tail.head, r1 => r1.head).join(supplier)(r1 => r1.tail.tail.tail.head, r1 => r1.head).join(nation)(r1 => r1.head.head.head.tail.tail.tail.head, r1 => r1.head).where(r1 => (r1.head.head.head.tail.tail.tail.tail.tail.head >= toRep(19960101))).where(r1 => (r1.head.head.head.head.tail.tail.tail.head === r1.head.tail.tail.tail.tail.head)).join(region)(r1 => r1.tail.tail.tail.head, r1 => r1.head).where(r1 => (r1.tail.tail.head === toRep("ASIA"))).mapReduce(r => Pair(r.head.tail.tail.head, (r.head.head.head.tail.tail.tail.tail.tail.tail.head * (toRep(1.0) - r.head.head.head.tail.tail.tail.tail.tail.tail.tail.head))),
 (s1: Rep[Double], s2: Rep[Double]) => (s1 + s2)).toArray.map(r => Pair(r.head, r.tail))).orderBy(r => -r.tail)

def Q6(lineitem: Rep[Table[Lineitem]]) = { val result = lineitem.where(r1 => ((((r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head >= toRep(19960101)) && (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= toRep(19970101))) && ((r1.tail.tail.tail.tail.tail.tail.head >= toRep(0.08)) && (r1.tail.tail.tail.tail.tail.tail.head <= toRep(0.1)))) && (r1.tail.tail.tail.tail.head < toRep(24.0)))) ; (result.sum(r => (r.tail.tail.tail.tail.tail.head * r.tail.tail.tail.tail.tail.tail.head))) }

def Q7(customer: Rep[Table[Customer]], lineitem: Rep[Table[Lineitem]], supplier: Rep[Table[Supplier]], nation: Rep[Table[Nation]], orders: Rep[Table[Orders]]) = ReadOnlyTable(supplier.join(lineitem)(r1 => r1.head, r1 => r1.tail.tail.head).where(r1 => ((r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head >= toRep(19950101)) && (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= toRep(19961231)))).join(orders)(r1 => r1.tail.head, r1 => r1.head).join(customer)(r1 => r1.tail.tail.head, r1 => r1.head).join(nation)(r1 => r1.head.head.head.tail.tail.tail.head, r1 => r1.head).join(nation)(r1 => r1.head.tail.tail.tail.tail.head, r1 => r1.head).where(r1 => (((r1.head.tail.tail.head === toRep("UNITED STATES")) && (r1.tail.tail.head === toRep("INDONESIA"))) || ((r1.head.tail.tail.head === toRep("INDONESIA")) && (r1.tail.tail.head === toRep("UNITED STATES"))))).select(r1 => Pair(r1.head.tail.tail.head, Pair(r1.tail.tail.head, Pair((r1.head.head.head.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head/!toRep(10000)), (r1.head.head.head.head.tail.tail.tail.tail.tail.tail.head * (toRep(1.0) - r1.head.head.head.head.tail.tail.tail.tail.tail.tail.tail.head)))))).mapReduce(r => Pair(Pair(r.head, Pair(r.tail.head, r.tail.tail.head)), r.tail.tail.tail),
 (s1: Rep[Double], s2: Rep[Double]) => (s1 + s2)).toArray.map(r => Pair(r.head.head, Pair(r.head.tail.head, Pair(r.head.tail.tail, r.tail))))).orderBy(r => Pair(r.head, Pair(r.tail.head, r.tail.tail.head)))

def Q8(region: Rep[Table[Region]], customer: Rep[Table[Customer]], lineitem: Rep[Table[Lineitem]], part: Rep[Table[Part]], supplier: Rep[Table[Supplier]], nation: Rep[Table[Nation]], orders: Rep[Table[Orders]]) = ReadOnlyTable(part.where(r1 => (r1.tail.tail.tail.tail.head === toRep("MEDIUM ANODIZED NICKEL"))).join(lineitem)(r1 => r1.head, r1 => r1.tail.head).join(supplier)(r1 => r1.tail.tail.tail.head, r1 => r1.head).join(orders)(r1 => r1.head.tail.head, r1 => r1.head).join(customer)(r1 => r1.tail.tail.head, r1 => r1.head).join(nation)(r1 => r1.tail.tail.tail.tail.head, r1 => r1.head).join(nation)(r1 => r1.head.head.head.tail.tail.tail.tail.head, r1 => r1.head).where(r1 => ((r1.head.head.head.tail.tail.tail.tail.tail.head >= toRep(19950101)) && (r1.head.head.head.tail.tail.tail.tail.tail.head <= toRep(19961231)))).join(region)(r1 => r1.head.tail.tail.tail.head, r1 => r1.head).where(r1 => (r1.tail.tail.head === toRep("ASIA"))).select(r1 => Pair((r1.head.head.head.head.tail.tail.tail.tail.tail.head/!toRep(10000)), Pair((r1.head.head.head.head.head.head.tail.tail.tail.tail.tail.tail.head * (toRep(1.0) - r1.head.head.head.head.head.head.tail.tail.tail.tail.tail.tail.tail.head)), r1.head.tail.tail.head))).mapReduce(r => Pair(r.head, Pair(IF ((r.tail.tail === toRep("INDONESIA"))) THEN (r.tail.head) ELSE (toRep(0)), r.tail.head)),
 (s1: Rep[(Double, Double)], s2: Rep[(Double, Double)]) => (s1._1 + s2._1,s1._2 + s2._2)).toArray.map(r => Pair(r.head, Pair(r.tail.head, r.tail.tail)))).select(r => Pair(r.head, (r.tail.head/r.tail.tail))).orderBy(r => r.head)

def Q9(lineitem: Rep[Table[Lineitem]], part: Rep[Table[Part]], supplier: Rep[Table[Supplier]], nation: Rep[Table[Nation]], orders: Rep[Table[Orders]], partsupp: Rep[Table[Partsupp]]) = ReadOnlyTable(lineitem.join(supplier)(r1 => r1.tail.tail.head, r1 => r1.head).join(part)(r1 => r1.head.tail.head, r1 => r1.head).where(r1 => r1.tail.tail.head.contains("ghost")).join(partsupp)(r1 => Pair(r1.head.head.tail.head, r1.head.head.tail.tail.head), r1 => Pair(r1.head, r1.tail.head)).join(orders)(r1 => r1.head.head.head.head, r1 => r1.head).join(nation)(r1 => r1.head.head.head.tail.tail.tail.tail.head, r1 => r1.head).select(r1 => Pair(r1.tail.tail.head, Pair((r1.head.tail.tail.tail.tail.tail.head/!toRep(10000)), ((r1.head.head.head.head.head.tail.tail.tail.tail.tail.head * (toRep(1.0) - r1.head.head.head.head.head.tail.tail.tail.tail.tail.tail.head)) - (r1.head.head.tail.tail.tail.tail.head * r1.head.head.head.head.head.tail.tail.tail.tail.head))))).mapReduce(r => Pair(Pair(r.head, r.tail.head), r.tail.tail),
 (s1: Rep[Double], s2: Rep[Double]) => (s1 + s2)).toArray.map(r => Pair(r.head.head, Pair(r.head.tail, r.tail)))).orderBy(r => Pair(r.head, -r.tail.head))

def Q10(orders: Rep[Table[Orders]], customer: Rep[Table[Customer]], lineitem: Rep[Table[Lineitem]], nation: Rep[Table[Nation]]) = ReadOnlyTable(orders.where(r1 => ((r1.tail.tail.tail.tail.head >= toRep(19941101)) && (r1.tail.tail.tail.tail.head < toRep(19950201)))).join(customer)(r1 => r1.tail.head, r1 => r1.head).join(lineitem)(r1 => r1.head.head, r1 => r1.head).where(r1 => (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.head.toStr === toRep("R"))).join(nation)(r1 => r1.head.tail.tail.tail.tail.head, r1 => r1.head).mapReduce(r => Pair(Pair(r.head.head.tail.head, Pair(r.head.head.tail.tail.head, Pair(r.head.head.tail.tail.tail.tail.tail.tail.head, Pair(r.head.head.tail.tail.tail.tail.tail.head, Pair(r.tail.tail.head, Pair(r.head.head.tail.tail.tail.head, r.head.head.tail.tail.tail.tail.tail.tail.tail.tail)))))), (r.head.tail.tail.tail.tail.tail.tail.head * (toRep(1.0) - r.head.tail.tail.tail.tail.tail.tail.tail.head))),
 (s1: Rep[Double], s2: Rep[Double]) => (s1 + s2)).toArray.map(r => Pair(r.head.head, Pair(r.head.tail.head, Pair(r.tail, Pair(r.head.tail.tail.head, Pair(r.head.tail.tail.tail.tail.head, Pair(r.head.tail.tail.tail.tail.tail.head, Pair(r.head.tail.tail.tail.head, r.head.tail.tail.tail.tail.tail.tail))))))))).orderBy(r => -r.tail.tail.head)

def Q11(partsupp: Rep[Table[Partsupp]], supplier: Rep[Table[Supplier]], nation: Rep[Table[Nation]]) = ReadOnlyTable(partsupp.join(supplier)(r1 => r1.tail.head, r1 => r1.head).join(nation)(r1 => r1.tail.tail.tail.tail.head, r1 => r1.head).where(r1 => (r1.tail.tail.head === toRep("UNITED KINGDOM"))).mapReduce(r => Pair(r.head.head.head, (r.head.head.tail.tail.tail.head * r.head.head.tail.tail.head.toDouble)),
 (s1: Rep[Double], s2: Rep[Double]) => (s1 + s2)).toArray.map(r => Pair(r.head, r.tail))).where(r => (r.tail > (toRep(1.0E-4) * ({ val result = partsupp.join(supplier)(r2 => r2.tail.head, r2 => r2.head).join(nation)(r2 => r2.tail.tail.tail.tail.head, r2 => r2.head).where(r2 => (r2.tail.tail.head === toRep("UNITED KINGDOM"))) ; (result.sum(r1 => (r1.head.head.tail.tail.tail.head * r1.head.head.tail.tail.head.toDouble))) })))).orderBy(r => -r.tail)

def Q12(orders: Rep[Table[Orders]], lineitem: Rep[Table[Lineitem]]) = ReadOnlyTable(orders.join(lineitem)(r1 => r1.head, r1 => r1.head).where(r1 => (((((r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("MAIL") || r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("SHIP")) && (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head < r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)) && (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head < r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)) && (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head >= toRep(19940101))) && (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head < toRep(19950101)))).mapReduce(r => Pair(r.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head, Pair(IF (((r.head.tail.tail.tail.tail.tail.head === toRep("1-URGENT")) || (r.head.tail.tail.tail.tail.tail.head === toRep("2-HIGH")))) THEN (toRep(1)) ELSE (toRep(0)), IF (((r.head.tail.tail.tail.tail.tail.head !== toRep("1-URGENT")) && (r.head.tail.tail.tail.tail.tail.head !== toRep("2-HIGH")))) THEN (toRep(1)) ELSE (toRep(0)))),
 (s1: Rep[(Int, Int)], s2: Rep[(Int, Int)]) => (s1._1 + s2._1,s1._2 + s2._2)).toArray.map(r => Pair(r.head, Pair(r.tail.head, r.tail.tail)))).orderBy(r => r.head)

def Q13(customer: Rep[Table[Customer]], orders: Rep[Table[Orders]]) = ReadOnlyTable(ReadOnlyTable(customer.join(orders)(r2 => r2.head, r2 => r2.tail.head).where(r2 => !r2.tail.tail.tail.tail.tail.tail.tail.tail.tail.matches(".*unusual.*packages.*")).mapReduce(r1 => Pair(r1.head.head, 1),
 (s1: Rep[Int], s2: Rep[Int]) => (s1 + s2)).toArray.map(r1 => Pair(r1.head, r1.tail))).mapReduce(r => Pair(r.tail, 1),
 (s1: Rep[Int], s2: Rep[Int]) => (s1 + s2)).toArray.map(r => Pair(r.head, r.tail))).orderBy(r => Pair(-r.tail, -r.head))

def Q14(lineitem: Rep[Table[Lineitem]], part: Rep[Table[Part]]) = { val result = lineitem.where(r1 => ((r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head >= toRep(19940301)) && (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head < toRep(19940401)))).join(part)(r1 => r1.tail.head, r1 => r1.head) ; (((toRep(100.0) * result.sum(r => IF (r.tail.tail.tail.tail.tail.head.endsWith("PROMO")) THEN ((r.head.tail.tail.tail.tail.tail.head * (toRep(1.0) - r.head.tail.tail.tail.tail.tail.tail.head))) ELSE (toRep(0))))/result.sum(r => (r.head.tail.tail.tail.tail.tail.head * (toRep(1.0) - r.head.tail.tail.tail.tail.tail.tail.head))))) }

def Q15(supplier: Rep[Table[Supplier]], lineitem: Rep[Table[Lineitem]]) = supplier.join(ReadOnlyTable(lineitem.where(r1 => ((r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head >= toRep(19930901)) && (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head < toRep(19931201)))).mapReduce(r => Pair(r.tail.tail.head, (r.tail.tail.tail.tail.tail.head * (toRep(1.0) - r.tail.tail.tail.tail.tail.tail.head))),
 (s1: Rep[Double], s2: Rep[Double]) => (s1 + s2)).toArray.map(r => Pair(r.head, r.tail))))(r => r.head, r => r.head).where(r => (r.tail.tail === ({ val result = ReadOnlyTable(lineitem.where(r3 => ((r3.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head >= toRep(19930901)) && (r3.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head < toRep(19931201)))).mapReduce(r2 => Pair(r2.tail.tail.head, (r2.tail.tail.tail.tail.tail.head * (toRep(1.0) - r2.tail.tail.tail.tail.tail.tail.head))),
 (s1: Rep[Double], s2: Rep[Double]) => (s1 + s2)).toArray.map(r2 => Pair(r2.head, r2.tail))) ; (result.max(r1 => r1.tail)) }))).select(r => Pair(r.head.head, Pair(r.head.tail.head, Pair(r.head.tail.tail.head, Pair(r.head.tail.tail.tail.tail.head, r.tail.tail))))).orderBy(r => r.head)

def Q16(partsupp: Rep[Table[Partsupp]], part: Rep[Table[Part]], supplier: Rep[Table[Supplier]]) = ReadOnlyTable(partsupp.where(r1 => !(supplier.where(r2 => r2.tail.tail.tail.tail.tail.tail.matches(".*Customer.*Complaints.*")).select(r2 => r2.head).where(e => e == r1.tail.head).count !== 0)).join(part)(r1 => r1.head, r1 => r1.head).where(r1 => (((r1.tail.tail.tail.tail.head !== toRep("Brand#21")) && !r1.tail.tail.tail.tail.tail.head.endsWith("PROMO PLATED")) && (r1.tail.tail.tail.tail.tail.tail.head === toRep(23) || r1.tail.tail.tail.tail.tail.tail.head === toRep(3) || r1.tail.tail.tail.tail.tail.tail.head === toRep(33) || r1.tail.tail.tail.tail.tail.tail.head === toRep(29) || r1.tail.tail.tail.tail.tail.tail.head === toRep(40) || r1.tail.tail.tail.tail.tail.tail.head === toRep(27) || r1.tail.tail.tail.tail.tail.tail.head === toRep(22) || r1.tail.tail.tail.tail.tail.tail.head === toRep(4)))).mapReduce(r => Pair(Pair(r.tail.tail.tail.tail.head, Pair(r.tail.tail.tail.tail.tail.head, r.tail.tail.tail.tail.tail.tail.head)), 1),
 (s1: Rep[Int], s2: Rep[Int]) => (s1 + s2)).toArray.map(r => Pair(r.head.head, Pair(r.head.tail.head, Pair(r.head.tail.tail, r.tail))))).orderBy(r => Pair(-r.tail.tail.tail, Pair(r.head, Pair(r.tail.head, r.tail.tail.head))))

def Q17(lineitem: Rep[Table[Lineitem]], part: Rep[Table[Part]]) = { val result = lineitem.join(part)(r1 => r1.tail.head, r1 => r1.head).where(r1 => (((r1.tail.tail.tail.tail.head === toRep("Brand#15")) && (r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("MED BAG"))) && (r1.head.tail.tail.tail.tail.head < (toRep(0.2) * ({ val result = lineitem.where(r3 => (r3.tail.head === r1.tail.head)) ; (result.avg(r2 => r2.tail.tail.tail.tail.head)) }))))) ; ((result.sum(r => r.head.tail.tail.tail.tail.tail.head)/toRep(7.0))) }

def Q18(customer: Rep[Table[Customer]], orders: Rep[Table[Orders]], lineitem: Rep[Table[Lineitem]]) = ReadOnlyTable(customer.join(orders)(r1 => r1.head, r1 => r1.tail.head).join(lineitem)(r1 => r1.tail.head, r1 => r1.head).where(r1 => (ReadOnlyTable(lineitem.mapReduce(r2 => Pair(r2.head, r2.tail.tail.tail.tail.head),
 (s1: Rep[Double], s2: Rep[Double]) => (s1 + s2)).toArray.map(r2 => Pair(r2.head, r2.tail))).where(r2 => (r2.tail > toRep(300.0))).select(r2 => r2.head).where(e => e == r1.head.tail.head).count !== 0)).mapReduce(r => Pair(Pair(r.head.head.tail.head, Pair(r.head.head.head, Pair(r.head.tail.head, Pair(r.head.tail.tail.tail.tail.tail.head, r.head.tail.tail.tail.tail.head)))), r.tail.tail.tail.tail.tail.head),
 (s1: Rep[Double], s2: Rep[Double]) => (s1 + s2)).toArray.map(r => Pair(r.head.head, Pair(r.head.tail.head, Pair(r.head.tail.tail.head, Pair(r.head.tail.tail.tail.head, Pair(r.head.tail.tail.tail.tail, r.tail))))))).orderBy(r => Pair(-r.tail.tail.tail.tail.head, r.tail.tail.tail.head))

def Q19(lineitem: Rep[Table[Lineitem]], part: Rep[Table[Part]]) = { val result = lineitem.join(part)(r1 => r1.tail.head, r1 => r1.head).where(r1 => (((((((((r1.tail.tail.tail.tail.head === toRep("Brand#31")) && (r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("SM CASE") || r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("SM BOX") || r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("SM PACK") || r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("SM PKG"))) && (r1.head.tail.tail.tail.tail.head >= toRep(26.0))) && (r1.head.tail.tail.tail.tail.head <= toRep(36.0))) && ((r1.tail.tail.tail.tail.tail.tail.head >= toRep(1)) && (r1.tail.tail.tail.tail.tail.tail.head <= toRep(5)))) && (r1.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("AIR") || r1.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("AIR REG"))) && (r1.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("DELIVER IN PERSON"))) || (((((((r1.tail.tail.tail.tail.head === toRep("Brand#43")) && (r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("MED BAG") || r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("MED BOX") || r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("MED PKG") || r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("MED PACK"))) && (r1.head.tail.tail.tail.tail.head >= toRep(15.0))) && (r1.head.tail.tail.tail.tail.head <= toRep(25.0))) && ((r1.tail.tail.tail.tail.tail.tail.head >= toRep(1)) && (r1.tail.tail.tail.tail.tail.tail.head <= toRep(10)))) && (r1.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("AIR") || r1.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("AIR REG"))) && (r1.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("DELIVER IN PERSON")))) || (((((((r1.tail.tail.tail.tail.head === toRep("Brand#43")) && (r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("LG CASE") || r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("LG BOX") || r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("LG PACK") || r1.tail.tail.tail.tail.tail.tail.tail.head === toRep("LG PKG"))) && (r1.head.tail.tail.tail.tail.head >= toRep(4.0))) && (r1.head.tail.tail.tail.tail.head <= toRep(14.0))) && ((r1.tail.tail.tail.tail.tail.tail.head >= toRep(1)) && (r1.tail.tail.tail.tail.tail.tail.head <= toRep(15)))) && (r1.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("AIR") || r1.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("AIR REG"))) && (r1.head.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head === toRep("DELIVER IN PERSON"))))) ; (result.sum(r => (r.head.tail.tail.tail.tail.tail.head * (toRep(1.0) - r.head.tail.tail.tail.tail.tail.tail.head)))) }

def Q20(lineitem: Rep[Table[Lineitem]], part: Rep[Table[Part]], supplier: Rep[Table[Supplier]], nation: Rep[Table[Nation]], partsupp: Rep[Table[Partsupp]]) = supplier.where(r => (partsupp.where(r1 => ((part.where(r2 => r2.tail.head.endsWith("azure")).select(r2 => r2.head).where(e => e == r1.head).count !== 0) && (r1.tail.tail.head.toDouble > (toRep(0.5) * ({ val result = lineitem.where(r3 => ((((r3.tail.head === r1.head) && (r3.tail.tail.head === r.head)) && (r3.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head >= toRep(19960101))) && (r3.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head < toRep(19970101)))) ; (result.sum(r2 => r2.tail.tail.tail.tail.head)) }))))).select(r1 => r1.tail.head).where(e => e == r.head).count !== 0)).join(nation)(r => r.tail.tail.tail.head, r => r.head).where(r => (r.tail.tail.head === toRep("JORDAN"))).select(r => Pair(r.head.tail.head, r.head.tail.tail.head)).orderBy(r => r.head)

def Q21(supplier: Rep[Table[Supplier]], lineitem: Rep[Table[Lineitem]], orders: Rep[Table[Orders]], nation: Rep[Table[Nation]]) = ReadOnlyTable(supplier.join(lineitem)(r1 => r1.head, r1 => r1.tail.tail.head).where(r1 => !((lineitem.where(r2 => (((r2.head === r1.tail.head) && (r2.tail.tail.head !== r1.tail.tail.tail.head)) && (r2.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head > r2.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)))).count !== 0)).where(r1 => ((lineitem.where(r2 => ((r2.head === r1.tail.head) && (r2.tail.tail.head !== r1.tail.tail.tail.head)))).count !== 0)).where(r1 => (r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head > r1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)).join(orders)(r1 => r1.tail.head, r1 => r1.head).where(r1 => (r1.tail.tail.tail.head.toStr === toRep("F"))).join(nation)(r1 => r1.head.head.tail.tail.tail.head, r1 => r1.head).where(r1 => (r1.tail.tail.head === toRep("MOROCCO"))).mapReduce(r => Pair(r.head.head.head.tail.head, 1),
 (s1: Rep[Int], s2: Rep[Int]) => (s1 + s2)).toArray.map(r => Pair(r.head, r.tail))).orderBy(r => Pair(-r.tail, r.head))

def Q22(customer: Rep[Table[Customer]], orders: Rep[Table[Orders]]) = ReadOnlyTable(customer.where(r1 => (((r1.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I1]") || r1.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I2]") || r1.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I3]") || r1.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I4]") || r1.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I5]") || r1.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I6]") || r1.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I7]")) && (r1.tail.tail.tail.tail.tail.head > ({ val result = customer.where(r3 => ((r3.tail.tail.tail.tail.tail.head > toRep(0.0)) && (r3.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I1]") || r3.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I2]") || r3.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I3]") || r3.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I4]") || r3.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I5]") || r3.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I6]") || r3.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)) === toRep("[I7]")))) ; (result.avg(r2 => r2.tail.tail.tail.tail.tail.head)) }))) && !((orders.where(r2 => (r2.tail.head === r1.head))).count !== 0))).select(r1 => Pair(r1.tail.tail.tail.tail.head.substring(toRep(1), toRep(1) + toRep(2)), r1.tail.tail.tail.tail.tail.head)).mapReduce(r => Pair(r.head, Pair(1, r.tail)),
 (s1: Rep[(Int, Double)], s2: Rep[(Int, Double)]) => (s1._1 + s2._1,s1._2 + s2._2)).toArray.map(r => Pair(r.head, Pair(r.tail.head, r.tail.tail)))).orderBy(r => r.head)

}